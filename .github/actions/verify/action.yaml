name: 'Verify flutter/dart'
description: 'Basic verification for dart and flutter projects'
inputs:
  flutter_version:
    description: 'Flutter version'
    required: false
    default: '3.13.8'
  flutter_channel:
    description: 'Flutter channel'
    required: false
    default: 'stable'
  cache_key:
    description: 'Cache key'
    required: false
    default: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}
  concurrency:
    description: 'Concurrency'
    required: false
    default: '4'
  target_directories:
    description: 'Directories to target'
    required: true
  working_directory:
    description: 'Working directory'
    required: true
  package_get_excludes:
    description: 'Package get excludes'
    required: false
    default: "!*"
  test_recursion:
    description: 'Test recursion'
    required: false
    default: 'false'
  test_optimization:
    description: 'Test optimization'
    required: false
    default: 'false'
  coverage_excludes:
    description: 'Coverage excludes'
    required: false
    default: ''
  line_length:
    description: 'Line Length'
    required: false
    default: '80'
runs:
  using: 'composite'
  steps:
    - name: Git Checkout
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{inputs.flutter_version}}
        channel: ${{inputs.flutter_channel}}
        cache: true
        cache-key: ${{inputs.cache_key}}
    
    - name: Bootstrap melos
      uses: bluefireteam/melos-action@v3

    - name: Install Dependencies
      run: |
        flutter pub global activate very_good_cli
        very_good packages get --recursive --ignore=${{inputs.package_get_excludes}}
      shell: bash

    - name: Check Formatting
      run: dart format --line-length ${{inputs.line_length}} --set-exit-if-changed ${{inputs.target_directories}}
      shell: bash

    - name: Analyze
      run: flutter analyze ${{inputs.target_directories}}
      shell: bash

    - name: Run Tests
      run: very_good test -j ${{inputs.concurrency}} ${{(inputs.test_recursion && '--recursive') || ''}} ${{(inputs.test_optimization && '--optimization') || '--no-optimization'}} --coverage --test-randomize-ordering-seed random
      shell: bash

    - name: Check Code Coverage
      uses: VeryGoodOpenSource/very_good_coverage@v2
      with:
        path: ${{inputs.working_directory}}/coverage/lcov.info
        exclude: ${{inputs.coverage_excludes}}
        min_coverage: 0
